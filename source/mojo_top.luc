module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    output a,               // output a into PCB
    output b,               // output b into PCB
    output c,               // output c into PCB
    input s,                // receives output SUM from PCB
    input c_out             // receives output Cout from PCB 
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      // divisor set to 24 bit (max value) (2^24)
      counter slowclk(#SIZE(1),#DIV(24));
    }
  }
  .clk(slowclk.value){
    .rst(rst){
       // using counter component for auto mode to count up from 000 to 111
       // increments approximately every (2^25/50MHz = 671ms)
       counter count(#SIZE(3));
    }    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    io_led[2][7] = io_dip[2][7];
    
    
    if(io_dip[2][7] == 1) { 
      // auto mode
      a = count.value[0]; // MSB
      b = count.value[1];
      c = count.value[2]; // LSB
      io_led[1] = count.value; // display to LED
    }
    else{
      // manual mode
      a = io_dip[1][2]; // MSB
      b = io_dip[1][1];
      c = io_dip[1][0]; // LSB  

      io_led[1][2] = io_dip[1][2]; // display to LED
      io_led[1][1] = io_dip[1][1]; // display to LED
      io_led[1][0] = io_dip[1][0]; // display to LED
    }
    
    io_led[1][7] = s; // output to LED
    io_led[1][6] = c_out; // output to LED
  }
}